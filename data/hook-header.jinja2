/*
Cuckoo Sandbox - Automated Malware Analysis.
Copyright (C) 2010-2015 Cuckoo Foundation.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef MONITOR_HOOKS_H
#define MONITOR_HOOKS_H

#include <winsock2.h>
#include <windows.h>
#include <wininet.h>
#include <windns.h>
#include <mswsock.h>
#include <iphlpapi.h>
#include <wincrypt.h>
#include <shlobj.h>
#include <tlhelp32.h>
#include <lm.h>
#include "hook-info.h"
#include "ntapi.h"




#ifdef __i386__
static __inline__ PEB *get_PEB()
{
	void *PPEB;
	__asm__ __volatile__("movl %%fs:0x30, %0;":"=r"(PPEB));
	return PPEB;
}


static __inline__ int *  FixCall(int * Ptr)
{
	// Call seems to begin either by FF or E8 
	int i = 2;
	// Call is at least 2 bytes. (Up to 6 bytes from what i have seen in x86)
	// It starts with one of the following : 0xFF ; 0xE8 ; 0x9A
	Ptr = ((int)Ptr) -2;
	while (i <=6)
	{
		if ((*Ptr&0xff) == 0xFF)
		{
			break;
		}
		else if((*Ptr&0xff) == 0xE8) 
		{
			break;
		}
		else if((*Ptr&0xff) == 0x9A)
		{
			break;
		}
		else
		{
			Ptr = ((int)Ptr) -1;
			i++;
		}
	}
	return (int *)Ptr;
}


#endif







#ifdef __amd64__
static __inline__ PEB *get_PEB()
{
	return NULL;
}


static __inline__ int *  FixCall(int * Ptr)
{
	return NULL;
}




#endif











static __inline__ unsigned int IsInTextRange(int * Addr)
{
	PPEB PEB = get_PEB();
	PLDR_MODULE Module = (PLDR_MODULE) PEB->LoaderData->InLoadOrderModuleList.Flink;
	if ((void*)Addr - Module->BaseAddress < Module->SizeOfImage){
		return 1;
	}
	return 0;
}

static __inline__ uint8_t check_caller_address_in_module(int *caller){
  PPEB peb = get_PEB();
  PLDR_MODULE stop;
  //Assupmtion: the first loaded module is the code base.
  PLDR_MODULE module = (PLDR_MODULE) peb->LoaderData->InLoadOrderModuleList.Flink;
  stop = (PLDR_MODULE) peb->LoaderData->InLoadOrderModuleList.Blink;
  do{
    module = (PLDR_MODULE) module->InLoadOrderModuleList.Flink;
    if ((void*)caller-module->BaseAddress < module->SizeOfImage){
      return 1;
    }
  }while(module != stop);
  return 0;
}

static __inline__ int * GetCallerAddress() __attribute__((always_inline));
static __inline__ int * GetCallerAddress()
{
	int *Caller = NULL;
	int i =1;
	Caller = (void *)__builtin_return_address(0) -5; // Get return address minus 5 so we get the address where the function is called.
	
	// TODO : Fix depends on architecture
	//__asm__ __volatile__("movl 4(%%ebp),%0;"
    //                      : "=r" (Caller));
	if (IsInTextRange(Caller)) // If address is in .text section range, then we just return it.
	{
		return FixCall(Caller);
	}	
	while(check_caller_address_in_module(Caller) && i <= 10){
    switch(i){
      case 1:
        Caller = __builtin_return_address(1) ;
        break;
      case 2:
        Caller = __builtin_return_address(2) ;
        break;
      case 3:
        Caller = __builtin_return_address(3) ;
        break;
      case 4:
        Caller = __builtin_return_address(4) ;
        break;
      case 5:
        Caller = __builtin_return_address(5) ;
        break;
      case 6:
        Caller = __builtin_return_address(6) ;
        break;
      case 7:
        Caller = __builtin_return_address(7) ;
        break;
      case 8:
        Caller = __builtin_return_address(8) ;
        break;
      case 9:
        Caller = __builtin_return_address(9) ;
        break;
      case 10:
        Caller = __builtin_return_address(10) ;
        break;
      default:
        return FixCall(Caller);
    }
    ++i;
  }
  if (check_caller_address_in_module(Caller))
	{
		return NULL;
	}
  if (!IsInTextRange(Caller))
  {
	  return NULL;
  }
	return  FixCall(Caller);;
}




{%- for hook in sigs if hook.is_hook and not hook.ignore: %}

{%- endfor %}

#endif
